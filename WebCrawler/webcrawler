#!/usr/bin/python
import socket
import sys
import re
import argparse
import select

PAGE_SIZE = 4096
WORKER_NUMBER = 100
# to_visit = set()
# visited = set()
# flags = set()

class Worker(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.write_buffer = ''
        self.read_buffer = ''
        self.status = 0 # 0 for write, 1 for read and -1 for error
        self.target_url = None
        self.connect()

    def connect(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((self.host, self.port))
        self.socket.setblocking(False)

    def read(self):
        try:
            resp = self.socket.recv(PAGE_SIZE)
            self.read_buffer.extend(resp)
            if len(resp) == 0 or self.read_buffer.endswith('\r\n\r\n') or self.read_buffer.endswith('</html>'):
                return self.process_response(resp)
        except Exception as e:
            self.handle_error(e)
            return None
        return set(), set(), set()

    def process_response(resp):
        flag = set()
        to_visit = set()
        visited = set()



        self.read_buffer = None
        self.socket.close()
        # Reconnect
        self.connect()

class MasterCrawler:
    def __init__(self):
        self.cookie_dict = {}
        self.to_visit = set()
        self.visited = set()
        self.workers = []

    def login(self, host, port, username, password):
        # url can also be /accounts/login/?next=/fakebook
        # if without the /?next=/fakebook, it will be redirectly automatically
        # This is the GET request that goes to the login page
        get_fakebook_login_page = "GET /accounts/login/ HTTP/1.1\r\n" + \
                                "Host: " + host + "\r\n\r\n"
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.send((get_fakebook_login_page))
        resp = s.recv(PAGE_SIZE)
        print resp

        # Parse out the csrftoken and sessionid
        csrftoken = re.findall('csrftoken=(\w*)', resp)[0]
        sessionid = re.findall('sessionid=(\w*)', resp)[0]
        #print csrftoken
        #print sessionid

        # This is the POST request that logins in the Fakebook homepage
        login_request = "POST /accounts/login/ HTTP/1.1\r\n" + \
                        "Host: {host}\r\n" + \
                        "Content-Length: {length}\r\n" + \
                        "Cookie: csrftoken={csrftoken}; sessionid={sid}\r\n\r\n"
        formdata = "username={username}&password={password}&csrfmiddlewaretoken={csrf}&next=/fakebook/"\
                    .format(username=username, password=password, csrf=csrftoken)
        login_request = login_request.format(host=host, length=len(formdata), csrftoken=csrftoken, sid=sessionid)
        s.send(login_request+formdata)
        resp = s.recv(PAGE_SIZE)
        #print resp
        s.close()

        # Creates a dictionary that records down the keys and values of cookies
        cookies = re.findall(r"Set-Cookie: [^=]*=(.*?);",resp)
        keys = re.findall(r"Set-Cookie: (.*?)=",resp)
        self.cookie_dict = dict(zip(keys, cookies))
        #print cookie_dict

        # In the response, there is a line: Location: http://cs5700f16.ccs.neu.edu/fakebook/
        for location in re.findall('Location: (https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})', resp):
            self.to_visit.add(location)

        self.workers = [Worker(host, port, i) for i in range(WORKER_NUMBER)]

    def startCrawling(self):
        flagCounter = 0
        flags = set()
        while flagCounter < 5:
            rlist = [worker for worker in self.workers if worker.wants_read()]
            wlist = [worker for worker in self.workers if worker.wants_write()]

            readables, writables, exceptions = select.select(rlist, wlist, [], 3)

            if readables: self.process_read(readables)
            if writables: self.process_write(writables)

            # print('to_visit: %d\nflags: %d\nvisited: %d' % (len(self.to_visit), len(self.flags), len(self.visited)))

        for flag in self.flags: print(flag)
            print flag



def read_arguments():
    if len(sys.argv) != 3:
        print "Invalid password and username"
        sys.exit()
    username = sys.argv[1]
    password = sys.argv[2]
    return username, password

if __name__ == '__main__':
    host = "cs5700f16.ccs.neu.edu"
    port = 80
    username, password = read_arguments()
    crawler = MasterCrawler()
    crawler.login(host, port, username, password)
    crawler.startCrawling()